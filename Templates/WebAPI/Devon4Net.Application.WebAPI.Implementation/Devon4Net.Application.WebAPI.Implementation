<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Devon4Net.Application.WebAPI.Implementation</name>
    </assembly>
    <members>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Controllers.AccessCodeController">
            <summary>
             Access Code Controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Controllers.AccessCodeController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.IAccessCodeService)">
            <summary>
            Constructor
            </summary>
            <param name="AccessCodeService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Controllers.AccessCodeController.SearchAccessCodebyIdAccesscode(System.String)">
            <summary>
            Search Access Code Service
            </summary>
            <param name="idaccesscode"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Controllers.AccessCodeController.SearchVisitorAccessCodes(System.String)">
            <summary>
            Search Visitor Access Codes method from AccessCodeController
            </summary>
            <param name="idvisitor"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Controllers.AccessCodeController.CreateAccessCode(System.String,System.String)">
            <summary>
            Create Access Code
            </summary>
            <param name="idvisitor"></param>
            <param name="idqueue"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Controllers.AccessCodeController.DeleteAccessCode(System.String)">
            <summary>
            Access Code method from access code service
            </summary>
            <param name="idaccesscode"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Converters.AccessCodeConverter">
            <summary>
            Access Code Converter
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Converters.AccessCodeConverter.ModelToDto(Devon4Net.Application.WebAPI.Implementation.Domain.Entities.AccessCode)">
            <summary>
            ModelToDto transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Dto.AccessCodeDto">
            <summary>
            AccessCode dto
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Dto.AccessCodeDto.IdaccessCode">
            <summary>
            IdaccessCode
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Dto.AccessCodeDto.TicketNumber">
            <summary>
            TicketNumber
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Dto.AccessCodeDto.CreationTime">
            <summary>
            CreationTime
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Dto.AccessCodeDto.StartTime">
            <summary>
            StartTime
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Dto.AccessCodeDto.EndTime">
            <summary>
            EndTime
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException">
            <summary>
            Custom exception AlreadyHasCodeException
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.Exceptions.AlreadyHasCodeException"/> class.
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.AccessCodeService">
            <summary>
            Access Code Service Implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.AccessCodeService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.Application.WebAPI.Implementation.Domain.Database.JtqContext})">
            <summary>
            Access Code Service Implementation
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.AccessCodeService.SearchAccessCodebyIdAccessCode(System.String)">
            <summary>
            Search Access Code Service
            </summary>
            <param name="idaccesscode"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.AccessCodeService.CreateAccessCode(System.String,System.String)">
            <summary>
            Create Access Code Service Implementation
            </summary>
            <param name="idvisitor"></param>
            <param name="queue"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.AccessCodeService.DeleteAccessCode(System.String)">
            <summary>
            Delete Access Code method from access code service
            </summary>
            <param name="idaccesscode"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.AccessCodeService.SearchVisitorAccessCodes(System.String)">
            <summary>
            Search Visitor Acess Codes from AccessCodeService
            </summary>
            <param name="idvisitor"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.IAccessCodeService">
            <summary>
            Access code interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.IAccessCodeService.SearchAccessCodebyIdAccessCode(System.String)">
            <summary>
            Search access code
            </summary>    
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.IAccessCodeService.CreateAccessCode(System.String,System.String)">
            <summary>
            Create access code
            </summary>    
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.IAccessCodeService.DeleteAccessCode(System.String)">
            <summary>
            Delete Access Code
            </summary>    
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AccessCodeManagement.service.IAccessCodeService.SearchVisitorAccessCodes(System.String)">
            <Summary>
            Search visitor access codes
            </Summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController">
            <summary>
            TODOs controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController.#ctor(Microsoft.AspNetCore.Antiforgery.IAntiforgery)">
            <summary>
            Constructor
            </summary>
            <param name="antiForgeryToken"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController.Token">
            <summary>
            Gets the antiforgery token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController.HelloSecured">
            <summary>
            Gets the secured string result
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController">
            <summary>
            Auth controller sample.
            Please remember to avoid the use ob logic in a controller !!!
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.#ctor(Devon4Net.Infrastructure.JWT.Handlers.IJwtHandler)">
            <summary>
            Constructor with DI
            </summary>
            <param name="jwtHandler"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.Login(System.String,System.String)">
            <summary>
            Performs the login proces via the user/password flow
            This is only a sample. Please avoid any logic on the controller.
            </summary>
            <returns>LoginResponse class will provide the JWT token to securize the server calls</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.CurrentUser">
            <summary>
            Provides the information related to the logged user
            This is only a sample. Please never put any logic on a controller
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo">
            <summary>
            CorporateBasicInfo definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Id">
            <summary>
            the identifier
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Value">
            <summary>
            the provided value
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse">
            <summary>
            CurrentUserResponse definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.CorporateInfo">
            <summary>
            List of claims
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.LoginResponse">
            <summary>
            LoginResponse
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.LoginResponse.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController">
            <summary>
            Employees controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService)">
            <summary>
            Constructor
            </summary>
            <param name="employeeService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.GetEmployee">
            <summary>
            Gets the entire list of employees
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.Create(Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto)">
            <summary>
            Creates an employee
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.Delete(System.Int64)">
            <summary>
            Deletes the employee provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.ModifyEmployee(Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto)">
            <summary>
            Modifies the done status of the employee provided the data of the employee
            In this sample, all the data fields are mandatory
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Converters.EmployeeConverter">
            <summary>
            EmployeeConverter
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Converters.EmployeeConverter.ModelToDto(Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee)">
            <summary>
            ModelToDto transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto">
            <summary>
            Employee definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Id">
            <summary>
            the Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Name">
            <summary>
            the Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Surname">
            <summary>
            the Surname
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Mail">
            <summary>
            the Mail
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException">
            <summary>
            Custom exception EmployeeNotFoundException
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException"/> class.
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService">
            <summary>
            Employee service implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.GetEmployee(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            Gets the Employee
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.GetEmployeeById(System.Int64)">
            <summary>
            Gets the Employee by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.CreateEmployee(System.String,System.String,System.String)">
            <summary>
            Creates the Employee
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.DeleteEmployeeById(System.Int64)">
            <summary>
            Deletes the Employee by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.ModifyEmployeeById(System.Int64,System.String,System.String,System.String)">
            <summary>
            Modifies te state of the Employee by id
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService">
            <summary>
            IEmployeeService
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.GetEmployee(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            GetEmployee
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.GetEmployeeById(System.Int64)">
            <summary>
            GetEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.CreateEmployee(System.String,System.String,System.String)">
            <summary>
            CreateEmployee
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.DeleteEmployeeById(System.Int64)">
            <summary>
            DeleteEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.ModifyEmployeeById(System.Int64,System.String,System.String,System.String)">
            <summary>
            ModifyEmployeeById
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Validators.EmployeeFluentValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Validators.EmployeeFluentValidator.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="launchExceptionWhenError"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Validators.EmployeeFluentValidator.CustomValidate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand">
            <summary>
            THe command to create a TO-DO
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand.#ctor(System.String)">
            <summary>
            Constructor of the query 
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController">
            <summary>
            Controller sample to implement the mediator pattern
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController.#ctor(Devon4Net.Infrastructure.MediatR.Handler.IMediatRHandler)">
            <summary>
            Mediator sample controller
            </summary>
            <param name="mediatRHandler"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController.GetTodoById(System.Int64)">
            <summary>
            Gets a TO-DO item given the Id via CQRS pattern via a MediatR query
            </summary>
            <param name="todoId"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController.CreateTodo(System.String)">
            <summary>
            Creates a TO-DO item sending a MediatR via a message command
            </summary>
            <param name="todoDescription">The description of the TO-DO command. It cannot be empty</param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto">
            <summary>
            TodoDto definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException">
            <summary>
            Custom exception TodoNotFoundException
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler">
            <summary>
            CreateTodoHandler
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupLiteDbService)">
            <summary>
            CreateTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupService"></param>
            <param name="mediatRBackupLiteDbService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupLiteDbService)">
            <summary>
            CreateTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupLiteDbService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupService)">
            <summary>
            CreateTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler.HandleAction(Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand,System.Threading.CancellationToken)">
            <summary>
            HandleAction
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler">
            <summary>
            GetTodoHandler
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupLiteDbService)">
            <summary>
            GetTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupService"></param>
            <param name="mediatRBackupLiteDbService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupLiteDbService)">
            <summary>
            GetTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupLiteDbService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupService)">
            <summary>
            GetTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler.HandleAction(Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the received message to perform the query
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery.TodoId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery.#ctor(System.Int64)">
            <summary>
            Constructor of the query 
            </summary>
            <param name="todoId"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Controllers.PruebaController">
            <summary>
            Prueba controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Controllers.PruebaController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Service.IPruebaService)">
            <summary>
            Constructor
            </summary>
            <param name="pruebaService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Controllers.PruebaController.GetPrueba">
            <summary>
            Gets the entire list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Controllers.PruebaController.CreatePrueba(System.String)">
            <summary>
            Creates prueba
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Converters.PruebaConverter">
            <summary>
            PruebaConverter
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Converters.PruebaConverter.ModelToDto(Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Prueba)">
            <summary>
            ModelToDto transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Dto.PruebaDto">
            <summary>
            PruebaDto definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Dto.PruebaDto.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Dto.PruebaDto.Nombre">
            <summary>
            Nombre
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Service.IPruebaService">
            <summary>
            PruebaService interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Service.IPruebaService.GetPrueba(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Prueba,System.Boolean}})">
            <summary>
            GetTodo
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Service.IPruebaService.CreatePrueba(System.String)">
            <summary>
            CreatePrueba
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Service.PruebaService">
            <summary>
            Service implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Service.PruebaService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.Application.WebAPI.Implementation.Domain.Database.JtqContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Service.PruebaService.GetPrueba(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Prueba,System.Boolean}})">
            <summary>
            Gets the object
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.PruebaManagement.Service.PruebaService.CreatePrueba(System.String)">
            <summary>
            create prueba
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Controllers.QueueController">
            <summary>
            Queue controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Controllers.QueueController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Service.IQueueService)">
            <summary>
            Constructor
            </summary>
            <param name="QueueService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Controllers.QueueController.GetActiveQueues">
            <summary>
            Gets the entire list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Controllers.QueueController.CreateQueue(System.String)">
            <summary>
            Create queue
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Converters.QueueConverter">
            <summary>
            QueueConverter
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Converters.QueueConverter.ModelToDto(Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Queue)">
            <summary>
            ModelToDto transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Dto.QueueDto">
            <summary>
            Queue dto
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Dto.QueueDto.Idqueue">
            <summary>
            Idqueue
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Dto.QueueDto.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Dto.QueueDto.Logo">
            <summary>
            Logo
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Dto.QueueDto.CurrentNumber">
            <summary>
            CurrentNumber
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Dto.QueueDto.AttentionTime">
            <summary>
            AttentionTime
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Dto.QueueDto.MinAttentionTime">
            <summary>
            MinAttentionTime
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Dto.QueueDto.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Dto.QueueDto.Customers">
            <summary>
            Customers
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Service.IQueueService">
            <summary>
            TodoService interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Service.IQueueService.GetActiveQueues">
            <summary>
            GetTodo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Service.IQueueService.CreateQueue(System.String)">
            <summary>
            Create queue
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Service.QueueService">
            <summary>
            Service implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Service.QueueService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.Application.WebAPI.Implementation.Domain.Database.JtqContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Service.QueueService.GetActiveQueues">
            <summary>
            Get queues Active=true
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.QueueManagement.Service.QueueService.CreateQueue(System.String)">
            <summary>
            Create queue
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Commands.TodoCommand">
            <summary>
            TO-DO command creation via RabbitMq
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Commands.TodoCommand.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Controllers.RabbitMqController">
            <summary>
            Controller sample to show how RabbitMq works
            Please setup your RabbitMq server in the configuration file
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Controllers.RabbitMqController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler,Microsoft.Extensions.Options.IOptions{Devon4Net.Infrastructure.Common.Options.RabbitMq.RabbitMqOptions})">
            <summary>
            Class constructor
            </summary>
            <param name="todoRabbitMqHandler">The main handler injected via DI</param>
            <param name="rabbitMqOptions">The RabbitMq options to check if there is any instance set up</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Controllers.RabbitMqController.CreateTodo(System.String)">
            <summary>
            Creates a TO-DO command sending a RabbitMq message
            </summary>
            <param name="todoDescription">The description of the TO-DO command. It cannot be empty</param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler">
            <summary>
            TodoRabbitMqHandler 
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyNetQ.IBus,System.Boolean)">
            <summary>
            TodoRabbitMqHandler constructor to ensure the DI needs
            </summary>
            <param name="services"></param>
            <param name="serviceBus"></param>
            <param name="subscribeToChannel"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyNetQ.IBus,Devon4Net.Infrastructure.RabbitMQ.Domain.ServiceInterfaces.IRabbitMqBackupService,System.Boolean)">
            <summary>
            TodoRabbitMqHandler constructor to ensure the DI needs
            </summary>
            <param name="services"></param>
            <param name="serviceBus"></param>
            <param name="rabbitMqBackupService"></param>
            <param name="subscribeToChannel"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyNetQ.IBus,Devon4Net.Infrastructure.RabbitMQ.Domain.ServiceInterfaces.IRabbitMqBackupLiteDbService,System.Boolean)">
            <summary>
            TodoRabbitMqHandler constructor to ensure the DI needs
            </summary>
            <param name="services"></param>
            <param name="serviceBus"></param>
            <param name="rabbitMqBackupLiteDbService"></param>
            <param name="subscribeToChannel"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyNetQ.IBus,Devon4Net.Infrastructure.RabbitMQ.Domain.ServiceInterfaces.IRabbitMqBackupService,Devon4Net.Infrastructure.RabbitMQ.Domain.ServiceInterfaces.IRabbitMqBackupLiteDbService,System.Boolean)">
            <summary>
            TodoRabbitMqHandler constructor to ensure the DI needs
            </summary>
            <param name="services"></param>
            <param name="serviceBus"></param>
            <param name="rabbitMqBackupService"></param>
            <param name="rabbitMqBackupLiteDbService"></param>
            <param name="subscribeToChannel"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.HandleCommand(Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Commands.TodoCommand)">
            <summary>
            TodoRabbitMqHandler handler command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController">
            <summary>
            TODOs controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService)">
            <summary>
            Constructor
            </summary>
            <param name="todoService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.GetTodo">
            <summary>
            Gets the entire list of TODOS
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.Create(System.String)">
            <summary>
            Creates the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.Delete(System.Int64)">
            <summary>
            Deletes the object provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.ModifyTodo(System.Int64)">
            <summary>
            Modifies the done status of the object provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Converters.TodoConverter">
            <summary>
            TodoConverter
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Converters.TodoConverter.ModelToDto(Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos)">
            <summary>
            ModelToDto transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto">
            <summary>
            TodoDto definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService">
            <summary>
            TodoService interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            GetTodo
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.GetTodoById(System.Int64)">
            <summary>
            GetTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.CreateTodo(System.String)">
            <summary>
            CreateTodo
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.DeleteTodoById(System.Int64)">
            <summary>
            DeleteTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.ModifyTodoById(System.Int64)">
            <summary>
            ModifyTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService">
            <summary>
            Service implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            Gets the object
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.GetTodoById(System.Int64)">
            <summary>
            Gets the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.CreateTodo(System.String)">
            <summary>
            Creates the object
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.DeleteTodoById(System.Int64)">
            <summary>
            Deletes the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.ModifyTodoById(System.Int64)">
            <summary>
            Modifies te state of the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Validators.TodosFluentValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Validators.TodosFluentValidator.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="launchExceptionWhenError"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Validators.TodosFluentValidator.CustomValidate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Controllers.VisitorController">
            <summary>
            TODOs controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Controllers.VisitorController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Service.IVisitorService,Devon4Net.Infrastructure.JWT.Handlers.IJwtHandler)">
            <summary>
            Constructor
            </summary>
            <param name="visitorService"></param>
            <param name="JwtHandler"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Controllers.VisitorController.CreateVisitor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates Visitor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Controllers.VisitorController.Login(Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.LoginDto)">
            <summary>
            Checks user name and pass
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.LoginDto">
            <summary>
            Login entity
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.LoginDto.Username">
            <summary>
            username
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.LoginDto.Password">
            <summary>
            password
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.LoginResponseToken">
            <summary>
            LoginResponseToken
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.LoginResponseToken.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto">
            <summary>
            Visitor entity
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto.Idvisitor">
            <summary>
            Idvisitor
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto.PhoneNumber">
            <summary>
            PhoneNumber
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto.AcceptedCommercial">
            <summary>
            AcceptedCommercial
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto.AcceptedTerms">
            <summary>
            AcceptedTerms
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto.UserType">
            <summary>
            UserType
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Dto.VisitorDto.AccessCodes">
            <summary>
            AccessCodes
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms">
            <summary>
            Custom exception MustAcceptTerms
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Exceptions.MustAcceptTerms"/> class.
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Service.IVisitorService">
            <summary>
            TodoService interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Service.IVisitorService.CreateVisitor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            CreateVisitor
            </summary>
            <param name="username"></param>
            <param name="name"></param>
            <param name="pass"></param>
            <param name="tlf"></param>
            <param name="acceptedCommercial"></param>
            <param name="acceptedTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Service.IVisitorService.Login(System.String,System.String)">
            <Summary>
            Login visitor
            </Summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Service.VisitorService">
            <summary>
            Service Implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Service.VisitorService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.Application.WebAPI.Implementation.Domain.Database.JtqContext})">
            <summary>
            Visitor Service
            </summary>
            <param name="uow"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Service.VisitorService.CreateVisitor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            CreateVisitor
            </summary>
            <param name="username"></param>
            <param name="name"></param>
            <param name="pass"></param>
            <param name="tlf"></param>
            <param name="acceptedCommercial"></param>
            <param name="acceptedTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.VisitorManagement.Service.VisitorService.Login(System.String,System.String)">
            <Summary>
            Login visitor
            </Summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Configuration.DevonConfiguration">
            <summary>
            DevonConfiguration class
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Configuration.DevonConfiguration.SetupDevonDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Sets up the service dependency injection
            For example:
            services.AddTransient"ITodoService, TodoService"();
            services.AddTransient"ITodoRepository, TodoRepository"();
            Put your DI declarations here
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Configuration.DevonConfiguration.SetupDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Setup here your database connections.
            To use RabbitMq message backup declare the 'RabbitMqBackupContext' database setup
            PE: services.SetupDatabase&lt;RabbitMqBackupContext&gt;($"Data Source={FileOperations.GetFileFullPath("RabbitMqBackupSqLite.db")}", DatabaseType.Sqlite);
            Please add the connection strings to enable the backup messaging for MediatR abd RabbitMq using MediatRBackupContext and RabbitMqBackupContext
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.AccessCodeRepository">
            <Summary>
            Access code repository
            </Summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.AccessCodeRepository.#ctor(Devon4Net.Application.WebAPI.Implementation.Domain.Database.JtqContext)">
            <Summary>
            Constructor
            </Summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.AccessCodeRepository.CreateAccessCode(System.String,System.String)">
            <summary>
            CreateAccessCode
            </summary>
            <param name="idvisitor"></param>
            <param name="idqueue"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.AccessCodeRepository.DeleteAccessCode(System.String)">
            <summary>
            DeleteAccessCode
            </summary>
            <param name="idaccesscode"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.AccessCodeRepository.SearchAccessCodebyIdaccesscode(System.String)">
            <summary>
            search access code
            </summary>
            <param name="idaccesscode"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.AccessCodeRepository.AnyAccessCode(System.String,System.String)">
            <summary>
            Check if a visitor has any access code in a queue
            </summary>
            <param name="queueid"></param>
            <param name="visitorid"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository">
            <summary>
            Repository implementation for the Employee
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.#ctor(Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.GetEmployee(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            Get Employee method
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.GetEmployeeById(System.Int64)">
            <summary>
            Gets the Employee by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.Create(System.String,System.String,System.String)">
            <summary>
            Creates the Employee
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.DeleteEmployeeById(System.Int64)">
            <summary>
            Deletes the Employee by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.jtqRepository">
            <summary>
            Repository implementation for jtq
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.jtqRepository.#ctor(Devon4Net.Application.WebAPI.Implementation.Domain.Database.JtqContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.jtqRepository.GetPrueba(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Prueba,System.Boolean}})">
            <summary>
            Get method
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.jtqRepository.CreatePrueba(System.String)">
            <summary>
            CreatePrueba method
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.QueueRepository">
            <summary>
            Repository implementation for jtq
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.QueueRepository.#ctor(Devon4Net.Application.WebAPI.Implementation.Domain.Database.JtqContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.QueueRepository.GetActiveQueues">
            <summary>
            Get active queues
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.QueueRepository.CreateQueue(System.String)">
            <summary>
            Create queue
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.QueueRepository.IncrementCustomers(System.String)">
            <summary>
            Customers ++
            </summary>
            <param name="idqueue"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.QueueRepository.DecrementCustomers(System.String)">
            <summary>
            Customers --
            </summary>
            <param name="idqueue"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository">
            <summary>
            Repository implementation for the TODOS
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.#ctor(Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext,Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Validators.TodosFluentValidator)">
            <summary>
            TodosFluentValidator
            </summary>
            <param name="context"></param>
            <param name="todosValidator"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            Get object method
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.GetTodoById(System.Int64)">
            <summary>
            Get the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.Create(System.String)">
            <summary>
            Creates the object
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.DeleteTodoById(System.Int64)">
            <summary>
            Deletes the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.VisitorRepository">
            <summary>
            Visitor repository
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.VisitorRepository.#ctor(Devon4Net.Application.WebAPI.Implementation.Domain.Database.JtqContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.VisitorRepository.CreateVisitor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            CreateVisitor
            </summary>
            <param name="username"></param>
            <param name="name"></param>
            <param name="pass"></param>
            <param name="tlf"></param>
            <param name="acceptedCommercial"></param>
            <param name="acceptedTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.VisitorRepository.Login(System.String,System.String)">
            <summary>
            CreateVisitor
            </summary>
            <param name="username"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext">
            <summary>
            Employee database context definition
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext})">
            <summary>
            Employee context definition
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext.Employee">
            <summary>
            Dbset
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Model rules definition
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext">
            <summary>
            Context definition
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext})">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.Todos">
            <summary>
            Dbset
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Model rules definition
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee">
            <summary>
            Entity class for Employee
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee.Surname">
            <summary>
            Surname
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee.Mail">
            <summary>
            mail
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos">
            <summary>
            Entity class for Todos
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos.Description">
            <summary>
            Description 
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IAccessCodeRepository">
            <Summary>
            Access code repository interface
            </Summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IAccessCodeRepository.SearchAccessCodebyIdaccesscode(System.String)">
            <Summary>
            Search access code
            </Summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IAccessCodeRepository.DeleteAccessCode(System.String)">
            <Summary>
            Delete acces code
            </Summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IAccessCodeRepository.CreateAccessCode(System.String,System.String)">
            <Summary>
            Create access code
            </Summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IAccessCodeRepository.AnyAccessCode(System.String,System.String)">
            <Summary>
            Any access code
            </Summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IAccessCodeRepository.SearchVisitorAccessCodes(System.String)">
            <Summary>
            Search visitor access codes
            </Summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository">
            <summary>
            EmployeeRepository interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.GetEmployee(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            GetEmployee
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.GetEmployeeById(System.Int64)">
            <summary>
            GetEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.Create(System.String,System.String,System.String)">
            <summary>
            Create
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.DeleteEmployeeById(System.Int64)">
            <summary>
            DeleteEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IjtqRepository">
            <summary>
            jtq repository interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IjtqRepository.GetPrueba(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Prueba,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IjtqRepository.CreatePrueba(System.String)">
            <summary>
            
            </summary>
            <param name="nombre"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IQueueRepository">
            <summary>
            queue repository interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IQueueRepository.GetActiveQueues">
            <summary>
            Get queues Active = true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IQueueRepository.CreateQueue(System.String)">
            <summary>
            Create queue
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IQueueRepository.IncrementCustomers(System.String)">
            <summary>
            Customers ++
            </summary>
            <param name="idqueue"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IQueueRepository.DecrementCustomers(System.String)">
            <summary>
            Customers --
            </summary>
            <param name="idqueue"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository">
            <summary>
            TodoRepository interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.GetTodoById(System.Int64)">
            <summary>
            GetTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.Create(System.String)">
            <summary>
            Create
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.DeleteTodoById(System.Int64)">
            <summary>
            DeleteTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IVisitorRepository">
            <Summary>
            Visitor repository interface
            </Summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IVisitorRepository.CreateVisitor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <Summary>
            Create visitor
            </Summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IVisitorRepository.Login(System.String,System.String)">
            <Summary>
            Login visitor
            </Summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument">
            <summary>
            Custom exception NullOrWhiteSpaceArgument
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Exceptions.NullOrWhiteSpaceArgument"/> class.
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
    </members>
</doc>
